# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Taylor Lee 
Student ID: 303942204
Email: tay333@gmail.com

# Partner 2
Name: Kirby Cool
Student ID: 703892301
Email: kirbydcool@gmail.com


# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used the pthreads method.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
1. Downloading: although this wouldn't happen in the ordinary case, there is a possibility
to overflow the filename buffer when dowloading a file, due to the use of strcpy into the buffer.
Ordinarily, the tracker would tell you your filename was bogus, but if the tracket was corrupted and
didn't report a bad filename, the program would overflow it's filename buffer before attempting the download.
This was fixed by using strncpy with FILENAMESIZ - 1 for n.

2. Uploading: the program was suceptible to overflowing it's buffer by improperly calling osp2p_snscanf
with t->tail for len. This would cause improperly long download requests to cause a segmentation fault by corrupting
the task data structure. This was fixed by using FILEAMESIZ - 1 for len. Now, requests for long filenames receive
the "Odd request" response.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. To prevent a peer from uploading a endless file, we decided to cap the maximum filesize that our program
    will download. This constant, MAXFILESIZ, can be arbitrarily changed, but is curretly set to 50MB.

2. Some peers upload intentionally slow, only yielding a few bytes per read, which can hang the program.
    To fix this, we determined a threshold upload rate required of a peer, and tested this rate over some reads.
    We defined NUMREADS as the number of reads to sample, and MINRATE as the number of bytes/read required.
    Currently, NUMREADS = 16 and MINRATE = 128.

For both 1 & 2, too large a file or too slow a peer will cause the program to search for the next peer.

3. The skeleton code did't check for file requests outside the current working directory. This was our fix:
    We got the absolute path of the requested filename with realpath and the absolute path of the 
    current working directory with getcwd. We used strncmp these strings with len(working directory) for n.
    Errors with any of these calls prevents the upload, if there were no errors, then the requested file 
    is in the working directory.

4. To prevent communication confusion issues with the tracker when the tracker is connected to many peers,
    we increased the size of the task buffer to ensure catching all of the tracker's communication.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Upload attack: If evil mode is set when a peer requests a file, instead of searching for the file and
    uploading it, we looped our code to create a pipe and repeatedly write garbage into the pipe, then
    to write from the pipe to the peer, essentially infinitely uploading garbage to our peer. This is
    an attack, because if the peer doesn't have the first security feature we implemented, we will 
    fill up their disk with a huge bogus file.

Download attack: If evil mode is set while we are downloading files, we try to connect to a peer and
    request a file with a filename far greater than the filename buffer. This is an attack because 
    if the peer doesn't have the buffer overflow security feature we implemented, then it should crash 
    with a segmentation fault. Even if it does protect itself against buffer overflows, we will 
    repeatedly sent bogus requests to the peer, consuming it's resouces.


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
